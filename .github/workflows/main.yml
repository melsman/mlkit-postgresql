name: CI

on:

  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  build-test:

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
#        os: [macos-latest]
        mlcomp: [mlkit]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup environment
        run: |
          echo "OS=$(uname -s | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "RUNHOME=$(echo $HOME)" >> $GITHUB_ENV

      - name: Install MLKit and smlpkg
        working-directory: ${{ env.RUNHOME }}
        run: |
          echo "[OS: $OS, HOME: $RUNHOME]"
          wget https://github.com/diku-dk/smlpkg/releases/download/v0.1.4/smlpkg-bin-dist-${{env.OS}}.tgz
          tar xzf smlpkg-bin-dist-${{env.OS}}.tgz
          echo "$HOME/smlpkg-bin-dist-${{env.OS}}/bin" >> $GITHUB_PATH
          wget https://github.com/melsman/mlkit/releases/download/v4.5.12/mlkit-bin-dist-${{env.OS}}.tgz
          tar xzf mlkit-bin-dist-${{env.OS}}.tgz
          echo "$HOME/mlkit-bin-dist-${{env.OS}}/bin" >> $GITHUB_PATH
          mkdir -p .mlkit
          echo "SML_LIB $HOME/mlkit-bin-dist-${{env.OS}}/lib/mlkit" > .mlkit/mlb-path-map

      - name: Check
        run: |
          mlkit --version
          smlpkg --version
          psql --version

      - name: Start postgresql (macos)
        if: ${{ env.OS == 'darwin' }}
        run: |
          brew services start postgresql
          echo "Check PostgreSQL service is running"
          i=10
          COMMAND='pg_isready'
          while [ $i -gt 0 ]; do
            echo "Check PostgreSQL service status"
            eval $COMMAND && break
            ((i--))
            if [ $i == 0 ]; then
              echo "PostgreSQL service not ready, all attempts exhausted"
              exit 1
            fi
            echo "PostgreSQL service not ready, wait 10 more sec, attempts left: $i"
            sleep 10
          done
          psql --command="CREATE USER myuser PASSWORD 'mypassword'" --command="\du" postgres
          createdb --owner=myuser mydatabase
          PGPASSWORD=mypassword psql --username=myuser --host=localhost --list mydatabase

      - name: Start postgresql (linux)
        if: ${{ env.OS == 'linux' }}
        run: |
          sudo systemctl start postgresql.service
          pg_isready
          sudo -u postgres psql --command="CREATE USER runner PASSWORD 'mypassword'" --command="\du"
          sudo -u postgres psql --command="ALTER USER runner CREATEDB" --command="\du"
          sudo -u postgres createdb --owner=runner mydatabase
          PGPASSWORD=mypassword psql --username=runner --host=localhost --list mydatabase
          echo "$USER"

      - name: Build (linux)
        if: ${{ env.OS == 'linux' }}
        run: |
          POSTGRESQL_INCLUDEDIR=/usr/include/postgresql MLKIT_INCLUDEDIR=$HOME/mlkit-bin-dist-${{env.OS}}/share/mlkit/include MLCOMP=${{ matrix.mlcomp }} make clean all

      - name: Build (macos)
        if: ${{ env.OS == 'darwin' }}
        run: |
          POSTGRESQL_INCLUDEDIR=/usr/local/include/postgresql MLKIT_INCLUDEDIR=$HOME/mlkit-bin-dist-${{env.OS}}/share/mlkit/include MLCOMP=${{ matrix.mlcomp }} make clean all

      - name: Run tests (linux)
        if: ${{ env.OS == 'linux' }}
        run: |
          POSTGRESQL_INCLUDEDIR=/usr/include/postgresql MLKIT_INCLUDEDIR=$HOME/mlkit-bin-dist-${{env.OS}}/share/mlkit/include MLCOMP=${{ matrix.mlcomp }} make test

      - name: Run tests (macos)
        if: ${{ env.OS == 'darwin' }}
        run: |
          POSTGRESQL_INCLUDEDIR=/usr/local/include/postgresql MLKIT_INCLUDEDIR=$HOME/mlkit-bin-dist-${{env.OS}}/share/mlkit/include MLCOMP=${{ matrix.mlcomp }} make test
